 const monotonicArr = (nums) =>{
     for (let index=0; index < nums.length; index++){
         if (nums[index] !=0){
             nums[index+1]
             console.log(nums[index])
         }
     }
 }

 console.log(monotonicArr([4, 0, 1, 4, 2, 7, 0]))



 const missingNumbers = (nums) => {
     let uniqueNumbers = [...new Set(nums)].sort();
     console.log(uniqueNumbers)
     let missingNumbers = [];

     for(let i=0; i < uniqueNumbers.length; i++) {
         let current = uniqueNumbers[i];
         let nexxt = uniqueNumbers[i+1];
         if(nexxt-current > 1){
             for(let j=current + 1; j<nexxt; j++){
                 missingNumbers.push(j)
             }
         }
     }

     return missingNumbers;
 };

 console.log(missingNumbers([4, 0, 1, 4, 2, 7, 8]));



 const moveZeros =(nums) =>{
       const nonZeroIndex = nums.filter((item, index) => item != 0)
       const zeroIndex = nums.filter((item, index) => item ==0)
         console.log( ...nonZeroIndex,  ...zeroIndex)
 }

 console.log(moveZeros([0, 2, 0, 3, 4, 0, 5, 6, 0, 7]))



 const missing = (nums) =>{
   const myArr = [...new Set(nums)].sort()
   missingArr = []
         for(let i=0; i < myArr.length; i++){
             let current = myArr[i];
             let next = myArr[i+1];
             if(next-current > 1){
                 for(let j =current+1; j < next; j++){
                     missingArr.push(j)
                 }
             }
         }
         return missingArr
 }
 console.log(missing([9, 6, 4, 2, 3, 5, 7, 0, 1]))

// rotating k times

const rotate = (nums, k) =>{
     let myArr = [];
     for (let i=0; i<k; i++){
         const lastElement = nums.pop()
         nums.unshift(lastElement)
     }
    const myArr = nums.splice(-k)
    return [...myArr, ...nums];
}



const sortedSquares =(nums) =>{
   return nums.map((item) => item *item).sort((a,b) => a-b)
}
console.log(sortedSquares([-4,-1,0,3,10]))



 obj to arr
const obj = {
  '0': 'hello',
  '1': 'here',
  '2': 'here',
  '3': 'is',
  '4': 'my',
  '5': 'hello'
};

const myArr = Object.values(obj).map((item) => item)



 frequency finder
const frequencyFinder = (str) => {
   let count = {};
   let maxCount = 0;
   let mostOccurredElement = null;

   str.forEach((item) => {
       if (count[item]) {
           count[item]++;
       } else {
           count[item] = 1;
       }

       if (count[item] > maxCount) {
           maxCount = count[item];
           mostOccurredElement = item;
       }
   });

   return mostOccurredElement;
}

const str = ['a', 'b', 'a', 'c', 'b', 'a', 'd', 'a', 'b'];
const mostOccurred = frequencyFinder(str);
console.log("Most occurred element:", mostOccurred);

//less repeating number

const firstUniqChar = function(s) {
    let myObj = {};
    let minCount = Infinity;
    let lessOccurredElement = null;

    s.split('').forEach((item, index) => {
        if (myObj[item]) {
            myObj[item]++
        } else {
            myObj[item]  = 1
        }
    })
    Object.entries(myObj).forEach(([key, value]) => {
        if (myObj[key] < minCount ) {
            minCount = myObj[key]
            lessOccurredElement =  key
        }
    })
    return {'object': myObj, 'less repeating number' : lessOccurredElement};
};

console.log(firstUniqChar('loveleetcode'))

arr to obj
const arr = [ 'hello', 'here', 'here', 'is', 'my', 'hello' ]
let myObj ={}

arr.forEach((value, index) => {
  myObj[index] = value;
})

console.log(myObj)



 filtering
const values = {
  contactItem: [
    { contactItemSeq: 1, contactItemDetails: "Details 1" },
    { contactItemSeq: 2, contactItemDetails: "Details 2" },
    { contactItemSeq: 3, contactItemDetails: "Details 3" }
  ]
};

const editObj = {
  contactItem: [
    { contactItemSeq: 2, contactItemDetails: "Details 2 edited" },
    { contactItemSeq: 4, contactItemDetails: "Details 4" },
    { contactItemSeq: 5, contactItemDetails: "Details 5" }
  ]
};
let mappedValue = []
const mappedSeq = values.contactItem.map((item) => item.contactItemSeq)
const filteredData = editObj.contactItem.filter((item) => {
    if(mappedSeq.includes(item.contactItemSeq)){
        return mappedValue.push({...item, status: 'filtered'})
    }
    return mappedValue.push({...item, status: 'unfiltered'})
}
)
console.log('mappedSeq', mappedValue)



 binary search 
const arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];

const binarySearch = (arr, target) => {
    let left = 0;
    let  right = arr.length - 1
    while(left <= right) {
        let mid = Math.floor((left+right)/2)
        if (arr[mid] == target) {
            return {'index': mid, 'value': arr[mid]}
        } else if (arr[mid] < target) {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
    
}
console.log(binarySearch(arr, 12));



// flattening Nested Array
const nestedArray = [1, 6,
  [1, 2, [3, 4]],
  [5, 6],
  [7, [8, [9, 10]]]
]
const flattenNested = (array) => {
   let flattendArr= [];
   array.forEach((item) => {
       if (Array.isArray(item)) {
           flattendArr = flattendArr.concat(flattenNested(item))
        //   console.log('item', item)
       } else {
           flattendArr.push(item)
       }
   })
   return flattendArr
}

console.log(flattenNested(nestedArray));




//filtering through numbers
const data = {2: 'abc',3: 'def',5: 'ghi',9: 'jkl',7: 'pqr'}
const targetNumber = '35';
const filterdOBJ = (number) => {
    let myObj= {};
   number.split('').forEach((item) => {
       if (data[item]) {
           myObj[item] = data[item]
       }
   })
   return Object.values(myObj).join('')
}


console.log(filterdOBJ(targetNumber))


//fibonacci seq
const fibonacci = (n) =>{
    const fib = [0,1]; // initially we have this elemnets for fib
    for (let i=2; i<n; i++) {
        fib[i] = fib[i-1] + fib[i-2]
    }
    return fib;
}

console.log(fibonacci(7))

//factorial of number O(n)
const factorial = (n) =>{
   let fact = 1;
   for (let i=2; i<=n; i++ ) {
       fact = fact * i
   }
   return fact
}

console.log(factorial(4))

//finding consecutive 1 from the binary array
const consecutiveOnes = (arr) => {
    let current = 0;
    let max = 0;
    for(let i=0; i < arr.length; i++) {
        if(!arr[i]){
            current = 0
        } else {
            current ++;
            if (max < current) {
                max = current
            }
        }
    }
    return max
    
}


//reversing a number without converting it to a string

function reverseNumber(number) {
  var revNumber = 0;
  while (number > 0) {
    revNumber = (revNumber * 10) + (number % 10);
    number = Math.floor(number / 10);
  }
  return revNumber;
}
console.log(reverseNumber(876));

// longest sub string present in the array
function longestCommonPrefix(arr) {
    let result = arr[0];
    let length = result.length;
    for (let i = 1; i < arr.length; i++) {
        while (arr[i].indexOf(result) !== 0) {
            result = result.substring(0, length - 1);
            length--;
            if (result === '') {
                return '-1';
            }
        }
    }
 
    return result;
}
console.log(longestCommonPrefix(['loveleetcodee]))



var lengthOfLongestSubstring = function (s) {
    let currentString = [];
    let longestStringLength = 0;
 
    for (let i = 0; i < s.length; i++) {
        const currentCharacterPosition = currentString.indexOf(s[i]);
        if (currentCharacterPosition !== -1) {
         currentString.splice(0, currentCharacterPosition + 1);
        }
        currentString.push(s[i]);
        longestStringLength = Math.max(
            longestStringLength,
            currentString.length
        );
    }
 
    return longestStringLength;
};
 
console.log(lengthOfLongestSubstring('abcadabb'),'hhh')



// server loadbalacig counting
const main = (input) => {
    const data = input.trim().split('\n');
    const reqSize = parseInt(data[0]);
    const request = data[1].split(' ').map(Number);
    console.log('input', input, 'data', data)
    let server1 = 0;

    // Add elements to server1 if the index is even
    for (let i = 0; i < reqSize; i++) {
        if (i % 2 === 0) {
            server1 += request[i];
        }
    }

    console.log(server1); // Output the result
};

// Example test case to pass to the function
const exampleInput = '5\n1 2 3 4 5';
main(exampleInput); // Expected Output: 9 (1 + 3 + 5)



JavaScript Interview Prep â€“ Simple ES6+ Logic

1. Reverse a String
-------------------
const reverseString = (str) => str.split('').reverse().join('');
console.log(reverseString("hello")); // "olleh"



2. Count Vowels in a String
---------------------------
const countVowels = (str) => {
  const vowels = 'aeiouAEIOU';
  return str.split('').filter(char => vowels.includes(char)).length;
};
console.log(countVowels("Interview")); // 4



3. Sum of Digits in a Number
----------------------------
const sumDigits = (num) => {
  return num.toString().split('').reduce((acc, digit) => acc + Number(digit), 0);
};
console.log(sumDigits(1234)); // 10



4. Check if a Number is Prime
-----------------------------
const isPrime = (num) => {
  if (num <= 1) return false;
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) return false;
  }
  return true;
};
console.log(isPrime(7)); // true



5. Remove Duplicates from an Array
----------------------------------
const removeDuplicates = (arr) => [...new Set(arr)];
console.log(removeDuplicates([1, 2, 2, 3, 4, 4])); // [1, 2, 3, 4]



6. Find the Second Largest Number
---------------------------------
const secondLargest = (arr) => {
  const unique = [...new Set(arr)].sort((a, b) => b - a);
  return unique[1] ?? null;
};
console.log(secondLargest([10, 5, 10, 8])); // 8


7. Rotate Array Left by 1
-------------------------
const rotateLeft = (arr) => {
  arr.push(arr.shift());
  return arr;
};
console.log(rotateLeft([1, 2, 3, 4])); // [2, 3, 4, 1]



8. Capitalize First Letter of Each Word
---------------------------------------
const capitalizeWords = (str) => {
  return str
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};
console.log(capitalizeWords("hello world from javascript")); 
// Output: "Hello World From Javascript"


JavaScript FANG-Style Interview Questions â€“ Arrays, Objects, Frequency, Logic

1. Frequency Counter (Most Frequent Element)
--------------------------------------------
const mostFrequent = (arr) => {
  const freq = {};
  let max = 0, result = null;

  for (let num of arr) {
    freq[num] = (freq[num] || 0) + 1;
    if (freq[num] > max) {
      max = freq[num];
      result = num;
    }
  }

  return result;
};
console.log(mostFrequent([1, 3, 2, 3, 4, 3, 5])); // 3

2. Find Missing Numbers in a Range
----------------------------------
const findMissing = (arr) => {
  const full = Array.from({ length: Math.max(...arr) + 1 }, (_, i) => i);
  return full.filter(num => !arr.includes(num));
};
console.log(findMissing([0, 1, 2, 4, 6])); // [3, 5]

3. Product of All Elements Except Self (No Division)
----------------------------------------------------
const productExceptSelf = (nums) => {
  const n = nums.length;
  const left = Array(n).fill(1);
  const right = Array(n).fill(1);
  const result = Array(n);

  for (let i = 1; i < n; i++) left[i] = left[i - 1] * nums[i - 1];
  for (let i = n - 2; i >= 0; i--) right[i] = right[i + 1] * nums[i + 1];
  for (let i = 0; i < n; i++) result[i] = left[i] * right[i];

  return result;
};
console.log(productExceptSelf([1, 2, 3, 4])); // [24, 12, 8, 6]

4. Count Frequency of Characters in a String
--------------------------------------------
const charFrequency = (str) => {
  const freq = {};
  for (let char of str) {
    freq[char] = (freq[char] || 0) + 1;
  }
  return freq;
};
console.log(charFrequency("banana")); 
// Output: { b: 1, a: 3, n: 2 }

5. Group Elements by Frequency
------------------------------
const groupByFrequency = (arr) => {
  const freq = {};
  for (let num of arr) {
    freq[num] = (freq[num] || 0) + 1;
  }
  return Object.entries(freq).sort((a, b) => b[1] - a[1]);
};
console.log(groupByFrequency([4, 5, 6, 5, 4, 3, 4])); 
// Output: [ [ '4', 3 ], [ '5', 2 ], [ '6', 1 ], [ '3', 1 ] ]

6. Find All Duplicates in an Array
----------------------------------
const findDuplicates = (arr) => {
  const seen = new Set();
  const duplicates = new Set();
  for (let num of arr) {
    if (seen.has(num)) duplicates.add(num);
    seen.add(num);
  }
  return [...duplicates];
};
console.log(findDuplicates([1, 2, 3, 2, 4, 5, 1])); // [2, 1]

7. Convert Array to Frequency Object
------------------------------------
const arrayToFreqObject = (arr) => {
  return arr.reduce((acc, val) => {
    acc[val] = (acc[val] || 0) + 1;
    return acc;
  }, {});
};
console.log(arrayToFreqObject(["apple", "banana", "apple", "orange"])); 
// Output: { apple: 2, banana: 1, orange: 1 }


reversing a number without using any inbuilt method
const revNo = (num) => {
    let rev = 0
    while(num > 0) {
        let digit = num %10;
        rev = rev *10 + digit;
        num = Math.floor(num/10)
    }
    return rev
    
}

console.log(revNo(1234))

Write a function that takes an integer as input and repeatedly sums its digits until a single-digit number is obtained. The function should return this final single-digit result.

const sumUntil = (num) => {
    let sum =0;
    while (num >0) {
        sum += num %10
        num = Math.floor(num/10)
    }
    return sum
}
console.log(sumUntil(1234))


const arr = [
  {
    id: 1,
    name: "Leanne Graham",
    username: "Bret",
    email: "Sincere@april.biz",
    phone: "1-770-736-8031 x56442",
    city: "Gwenborough",
    company: "Romaguera-Crona"
  },
  {
    id: 2,
    name: "Ervin Howell",
    username: "Antonette",
    email: "Shanna@melissa.tv",
    phone: "010-692-6593 x09125",
    city: "Wisokyburgh",
    company: "Deckow-Crist"
  },
]
const myObj = {};
const myArr = []
arr.forEach((item) => {
    const {name, ...rest} = item;
    myObj[item.name]= rest;
    myArr.push({[name] : rest})
})
console.log(myObj, myArr)

